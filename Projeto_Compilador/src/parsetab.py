
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALNOTEQUALleftLESSLESSEQUALGREATERGREATEREQUALleftPLUSMINUSleftTIMESDIVDIVIDEMODnonassocELSEAND ARRAY ASSIGN BEGIN BOOLEAN CHAR CHAR_LIT COLON COMMA DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GREATER GREATEREQUAL IDENTIFIER IF INTEGER INT_LIT LBRACE LBRACKET LESS LESSEQUAL LPAREN MINUS MOD NOT NOTEQUAL OF OR PLUS PROCEDURE PROGRAM RBRACE RBRACKET REAL REAL_LIT RPAREN SEMICOLON STRING STRING_LIT THEN TIMES TO TRUE VAR WHILEprogram : PROGRAM IDENTIFIER SEMICOLON vars command_list DOTvars : VAR var_declarationsvars : empty var_declarations : var_declarations var_declaration\n| var_declaration var_declaration : identifiers_list COLON type SEMICOLON identifiers_list : identifiers_list COMMA IDENTIFIER\n| IDENTIFIER type : simple_type\n| array_type simple_type : INTEGER\n| REAL\n| STRING\n| CHAR\n| BOOLEAN array_type : ARRAY LBRACKET range RBRACKET OF simple_type range : INT_LIT DOTDOT INT_LIT command_list : BEGIN command_list_opt END\n| commandcommand_list_opt : command_list_body\n| command_list_body SEMICOLONcommand_list_body : command_list_body SEMICOLON command\n| commandcommand : function_call\n| assignment\n| if\n| while\n| for\nfunction_call : IDENTIFIER LPAREN args_list RPAREN\n\nargs_list : args_list COMMA expressionBool\n           | expressionBool\n           | empty\nargument : literal\n| var\nliteral : STRING_LIT\n| CHAR_LIT\n| INT_LIT\n| REAL_LIT\n| TRUE\n| FALSE\nvar : IDENTIFIER\n| IDENTIFIER LBRACKET expression RBRACKET\n\nif : IF expressionBool THEN command_list else\n\nelse : ELSE command_list\n     | empty\n\nwhile : WHILE expressionBool DO command_list\nfor : FOR IDENTIFIER ASSIGN expression to_or_downto expression DO command_list\n\nto_or_downto : TO\n             | DOWNTO\nexpressionBool : expression \n| expression opRel expression\nopRel : EQUAL\n| NOTEQUAL\n| LESS\n| LESSEQUAL\n| GREATER\n| GREATEREQUAL\nexpression : term\n| expression opAd termterm : factor\n| term opMul factoropAd : PLUS\n| MINUS\n| ANDopMul : TIMES\n| DIVIDE\n| DIV\n| MOD\n| ORfactor : argument\n| LPAREN expressionBool RPAREN\n| function_call\n\nassignment : IDENTIFIER ASSIGN expression\n           | IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression\nempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'IDENTIFIER':([2,4,5,6,7,10,17,18,19,20,21,24,25,26,36,49,51,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,92,103,106,108,111,112,113,121,],[3,-75,8,23,-3,8,40,40,48,23,-5,40,40,40,40,-4,90,8,8,40,40,-52,-53,-54,-55,-56,-57,-62,-63,-64,40,-65,-66,-67,-68,-69,40,8,40,40,-6,40,8,40,-48,-49,8,]),'SEMICOLON':([3,11,12,13,14,15,16,29,30,33,34,35,37,38,39,40,41,42,43,44,45,46,55,57,81,82,83,84,85,86,87,88,91,94,95,97,98,99,101,107,109,110,116,117,124,125,],[4,-19,-24,-25,-26,-27,-28,58,-23,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-73,-18,103,-9,-10,-11,-12,-13,-14,-15,-29,-22,-75,-59,-61,-71,-46,-43,-45,-42,-74,-44,-47,-16,]),'VAR':([4,],[6,]),'BEGIN':([4,5,7,20,21,49,59,79,103,108,121,],[-75,10,-3,-2,-5,-4,10,10,-6,10,10,]),'IF':([4,5,7,10,20,21,49,58,59,79,103,108,121,],[-75,17,-3,17,-2,-5,-4,17,17,17,-6,17,17,]),'WHILE':([4,5,7,10,20,21,49,58,59,79,103,108,121,],[-75,18,-3,18,-2,-5,-4,18,18,18,-6,18,18,]),'FOR':([4,5,7,10,20,21,49,58,59,79,103,108,121,],[-75,19,-3,19,-2,-5,-4,19,19,19,-6,19,19,]),'LPAREN':([8,17,18,24,25,26,36,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,106,111,112,113,],[24,36,36,36,36,36,36,24,36,36,-52,-53,-54,-55,-56,-57,-62,-63,-64,36,-65,-66,-67,-68,-69,36,36,36,36,36,-48,-49,]),'ASSIGN':([8,48,93,],[25,80,106,]),'LBRACKET':([8,40,89,],[26,78,104,]),'DOT':([9,11,12,13,14,15,16,33,34,35,37,38,39,40,41,42,43,44,45,46,55,57,91,95,97,98,99,101,107,109,110,116,117,124,],[27,-19,-24,-25,-26,-27,-28,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-73,-18,-29,-75,-59,-61,-71,-46,-43,-45,-42,-74,-44,-47,]),'ELSE':([11,12,13,14,15,16,33,34,35,37,38,39,40,41,42,43,44,45,46,55,57,91,95,97,98,99,101,107,109,110,116,117,124,],[-19,-24,-25,-26,-27,-28,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-73,-18,-29,108,-59,-61,-71,-46,-43,-45,-42,-74,-44,-47,]),'END':([11,12,13,14,15,16,28,29,30,33,34,35,37,38,39,40,41,42,43,44,45,46,55,57,58,91,94,95,97,98,99,101,107,109,110,116,117,124,],[-19,-24,-25,-26,-27,-28,57,-20,-23,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-73,-18,-21,-29,-22,-75,-59,-61,-71,-46,-43,-45,-42,-74,-44,-47,]),'STRING_LIT':([17,18,24,25,26,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,106,111,112,113,],[41,41,41,41,41,41,41,41,-52,-53,-54,-55,-56,-57,-62,-63,-64,41,-65,-66,-67,-68,-69,41,41,41,41,41,-48,-49,]),'CHAR_LIT':([17,18,24,25,26,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,106,111,112,113,],[42,42,42,42,42,42,42,42,-52,-53,-54,-55,-56,-57,-62,-63,-64,42,-65,-66,-67,-68,-69,42,42,42,42,42,-48,-49,]),'INT_LIT':([17,18,24,25,26,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,104,106,111,112,113,120,],[43,43,43,43,43,43,43,43,-52,-53,-54,-55,-56,-57,-62,-63,-64,43,-65,-66,-67,-68,-69,43,43,43,115,43,43,-48,-49,123,]),'REAL_LIT':([17,18,24,25,26,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,106,111,112,113,],[44,44,44,44,44,44,44,44,-52,-53,-54,-55,-56,-57,-62,-63,-64,44,-65,-66,-67,-68,-69,44,44,44,44,44,-48,-49,]),'TRUE':([17,18,24,25,26,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,106,111,112,113,],[45,45,45,45,45,45,45,45,-52,-53,-54,-55,-56,-57,-62,-63,-64,45,-65,-66,-67,-68,-69,45,45,45,45,45,-48,-49,]),'FALSE':([17,18,24,25,26,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,92,106,111,112,113,],[46,46,46,46,46,46,46,46,-52,-53,-54,-55,-56,-57,-62,-63,-64,46,-65,-66,-67,-68,-69,46,46,46,46,46,-48,-49,]),'COLON':([22,23,90,],[50,-8,-7,]),'COMMA':([22,23,24,32,33,34,35,37,38,39,40,41,42,43,44,45,46,52,53,54,90,91,96,97,98,99,105,110,],[51,-8,-75,-50,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,92,-31,-32,-7,-29,-51,-59,-61,-71,-30,-42,]),'RPAREN':([24,32,33,34,35,37,38,39,40,41,42,43,44,45,46,52,53,54,77,91,96,97,98,99,105,110,],[-75,-50,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,91,-31,-32,99,-29,-51,-59,-61,-71,-30,-42,]),'THEN':([31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,96,97,98,99,110,],[59,-50,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-51,-59,-61,-71,-42,]),'DO':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,91,96,97,98,99,110,118,],[-50,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,79,-29,-51,-59,-61,-71,-42,121,]),'EQUAL':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[62,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,-42,]),'NOTEQUAL':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[63,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,-42,]),'LESS':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[64,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,-42,]),'LESSEQUAL':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[65,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,-42,]),'GREATER':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[66,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,-42,]),'GREATEREQUAL':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[67,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,-42,]),'PLUS':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,55,56,91,96,97,98,99,100,102,110,116,118,],[68,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,68,68,-29,68,-59,-61,-71,68,68,-42,68,68,]),'MINUS':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,55,56,91,96,97,98,99,100,102,110,116,118,],[69,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,69,69,-29,69,-59,-61,-71,69,69,-42,69,69,]),'AND':([32,33,34,35,37,38,39,40,41,42,43,44,45,46,55,56,91,96,97,98,99,100,102,110,116,118,],[70,-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,70,70,-29,70,-59,-61,-71,70,70,-42,70,70,]),'RBRACKET':([33,34,35,37,38,39,40,41,42,43,44,45,46,56,91,97,98,99,100,110,114,123,],[-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,93,-29,-59,-61,-71,110,-42,119,-17,]),'TO':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,102,110,],[-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,112,-42,]),'DOWNTO':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,102,110,],[-58,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,-59,-61,-71,113,-42,]),'TIMES':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[72,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,72,-61,-71,-42,]),'DIVIDE':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[73,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,73,-61,-71,-42,]),'DIV':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[74,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,74,-61,-71,-42,]),'MOD':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[75,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,75,-61,-71,-42,]),'OR':([33,34,35,37,38,39,40,41,42,43,44,45,46,91,97,98,99,110,],[76,-60,-70,-72,-33,-34,-41,-35,-36,-37,-38,-39,-40,-29,76,-61,-71,-42,]),'INTEGER':([50,122,],[84,84,]),'REAL':([50,122,],[85,85,]),'STRING':([50,122,],[86,86,]),'CHAR':([50,122,],[87,87,]),'BOOLEAN':([50,122,],[88,88,]),'ARRAY':([50,],[89,]),'DOTDOT':([115,],[120,]),'OF':([119,],[122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,],[5,]),'empty':([4,24,95,],[7,54,109,]),'command_list':([5,59,79,108,121,],[9,95,101,117,124,]),'command':([5,10,58,59,79,108,121,],[11,30,94,11,11,11,11,]),'function_call':([5,10,17,18,24,25,26,36,58,59,60,61,71,78,79,80,92,106,108,111,121,],[12,12,37,37,37,37,37,37,12,12,37,37,37,37,12,37,37,37,12,37,12,]),'assignment':([5,10,58,59,79,108,121,],[13,13,13,13,13,13,13,]),'if':([5,10,58,59,79,108,121,],[14,14,14,14,14,14,14,]),'while':([5,10,58,59,79,108,121,],[15,15,15,15,15,15,15,]),'for':([5,10,58,59,79,108,121,],[16,16,16,16,16,16,16,]),'var_declarations':([6,],[20,]),'var_declaration':([6,20,],[21,49,]),'identifiers_list':([6,20,],[22,22,]),'command_list_opt':([10,],[28,]),'command_list_body':([10,],[29,]),'expressionBool':([17,18,24,36,92,],[31,47,53,77,105,]),'expression':([17,18,24,25,26,36,60,78,80,92,106,111,],[32,32,32,55,56,32,96,100,102,32,116,118,]),'term':([17,18,24,25,26,36,60,61,78,80,92,106,111,],[33,33,33,33,33,33,33,97,33,33,33,33,33,]),'factor':([17,18,24,25,26,36,60,61,71,78,80,92,106,111,],[34,34,34,34,34,34,34,34,98,34,34,34,34,34,]),'argument':([17,18,24,25,26,36,60,61,71,78,80,92,106,111,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'literal':([17,18,24,25,26,36,60,61,71,78,80,92,106,111,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'var':([17,18,24,25,26,36,60,61,71,78,80,92,106,111,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'args_list':([24,],[52,]),'opRel':([32,],[60,]),'opAd':([32,55,56,96,100,102,116,118,],[61,61,61,61,61,61,61,61,]),'opMul':([33,97,],[71,71,]),'type':([50,],[81,]),'simple_type':([50,122,],[82,125,]),'array_type':([50,],[83,]),'else':([95,],[107,]),'to_or_downto':([102,],[111,]),'range':([104,],[114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOLON vars command_list DOT','program',6,'p_program','pascal_yacc.py',19),
  ('vars -> VAR var_declarations','vars',2,'p_vars','pascal_yacc.py',24),
  ('vars -> empty','vars',1,'p_vars_empty','pascal_yacc.py',29),
  ('var_declarations -> var_declarations var_declaration','var_declarations',2,'p_var_declarations','pascal_yacc.py',33),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','pascal_yacc.py',34),
  ('var_declaration -> identifiers_list COLON type SEMICOLON','var_declaration',4,'p_var_declaration','pascal_yacc.py',41),
  ('identifiers_list -> identifiers_list COMMA IDENTIFIER','identifiers_list',3,'p_identifiers_list','pascal_yacc.py',47),
  ('identifiers_list -> IDENTIFIER','identifiers_list',1,'p_identifiers_list','pascal_yacc.py',48),
  ('type -> simple_type','type',1,'p_type','pascal_yacc.py',55),
  ('type -> array_type','type',1,'p_type','pascal_yacc.py',56),
  ('simple_type -> INTEGER','simple_type',1,'p_simple_type','pascal_yacc.py',60),
  ('simple_type -> REAL','simple_type',1,'p_simple_type','pascal_yacc.py',61),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','pascal_yacc.py',62),
  ('simple_type -> CHAR','simple_type',1,'p_simple_type','pascal_yacc.py',63),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','pascal_yacc.py',64),
  ('array_type -> ARRAY LBRACKET range RBRACKET OF simple_type','array_type',6,'p_array_type','pascal_yacc.py',68),
  ('range -> INT_LIT DOTDOT INT_LIT','range',3,'p_range','pascal_yacc.py',72),
  ('command_list -> BEGIN command_list_opt END','command_list',3,'p_command_list','pascal_yacc.py',78),
  ('command_list -> command','command_list',1,'p_command_list','pascal_yacc.py',79),
  ('command_list_opt -> command_list_body','command_list_opt',1,'p_command_list_opt','pascal_yacc.py',86),
  ('command_list_opt -> command_list_body SEMICOLON','command_list_opt',2,'p_command_list_opt','pascal_yacc.py',87),
  ('command_list_body -> command_list_body SEMICOLON command','command_list_body',3,'p_command_list_body','pascal_yacc.py',92),
  ('command_list_body -> command','command_list_body',1,'p_command_list_body','pascal_yacc.py',93),
  ('command -> function_call','command',1,'p_command','pascal_yacc.py',100),
  ('command -> assignment','command',1,'p_command','pascal_yacc.py',101),
  ('command -> if','command',1,'p_command','pascal_yacc.py',102),
  ('command -> while','command',1,'p_command','pascal_yacc.py',103),
  ('command -> for','command',1,'p_command','pascal_yacc.py',104),
  ('function_call -> IDENTIFIER LPAREN args_list RPAREN','function_call',4,'p_function_call','pascal_yacc.py',109),
  ('args_list -> args_list COMMA expressionBool','args_list',3,'p_args_list','pascal_yacc.py',119),
  ('args_list -> expressionBool','args_list',1,'p_args_list','pascal_yacc.py',120),
  ('args_list -> empty','args_list',1,'p_args_list','pascal_yacc.py',121),
  ('argument -> literal','argument',1,'p_argument','pascal_yacc.py',133),
  ('argument -> var','argument',1,'p_argument','pascal_yacc.py',134),
  ('literal -> STRING_LIT','literal',1,'p_literal','pascal_yacc.py',139),
  ('literal -> CHAR_LIT','literal',1,'p_literal','pascal_yacc.py',140),
  ('literal -> INT_LIT','literal',1,'p_literal','pascal_yacc.py',141),
  ('literal -> REAL_LIT','literal',1,'p_literal','pascal_yacc.py',142),
  ('literal -> TRUE','literal',1,'p_literal','pascal_yacc.py',143),
  ('literal -> FALSE','literal',1,'p_literal','pascal_yacc.py',144),
  ('var -> IDENTIFIER','var',1,'p_var','pascal_yacc.py',169),
  ('var -> IDENTIFIER LBRACKET expression RBRACKET','var',4,'p_var','pascal_yacc.py',170),
  ('if -> IF expressionBool THEN command_list else','if',5,'p_if','pascal_yacc.py',202),
  ('else -> ELSE command_list','else',2,'p_else','pascal_yacc.py',208),
  ('else -> empty','else',1,'p_else','pascal_yacc.py',209),
  ('while -> WHILE expressionBool DO command_list','while',4,'p_while','pascal_yacc.py',219),
  ('for -> FOR IDENTIFIER ASSIGN expression to_or_downto expression DO command_list','for',8,'p_for','pascal_yacc.py',225),
  ('to_or_downto -> TO','to_or_downto',1,'p_to_or_downto','pascal_yacc.py',231),
  ('to_or_downto -> DOWNTO','to_or_downto',1,'p_to_or_downto','pascal_yacc.py',232),
  ('expressionBool -> expression','expressionBool',1,'p_expressionBool','pascal_yacc.py',237),
  ('expressionBool -> expression opRel expression','expressionBool',3,'p_expressionBool','pascal_yacc.py',238),
  ('opRel -> EQUAL','opRel',1,'p_opRel','pascal_yacc.py',254),
  ('opRel -> NOTEQUAL','opRel',1,'p_opRel','pascal_yacc.py',255),
  ('opRel -> LESS','opRel',1,'p_opRel','pascal_yacc.py',256),
  ('opRel -> LESSEQUAL','opRel',1,'p_opRel','pascal_yacc.py',257),
  ('opRel -> GREATER','opRel',1,'p_opRel','pascal_yacc.py',258),
  ('opRel -> GREATEREQUAL','opRel',1,'p_opRel','pascal_yacc.py',259),
  ('expression -> term','expression',1,'p_expression','pascal_yacc.py',264),
  ('expression -> expression opAd term','expression',3,'p_expression','pascal_yacc.py',265),
  ('term -> factor','term',1,'p_term','pascal_yacc.py',280),
  ('term -> term opMul factor','term',3,'p_term','pascal_yacc.py',281),
  ('opAd -> PLUS','opAd',1,'p_opAd','pascal_yacc.py',297),
  ('opAd -> MINUS','opAd',1,'p_opAd','pascal_yacc.py',298),
  ('opAd -> AND','opAd',1,'p_opAd','pascal_yacc.py',299),
  ('opMul -> TIMES','opMul',1,'p_opMul','pascal_yacc.py',303),
  ('opMul -> DIVIDE','opMul',1,'p_opMul','pascal_yacc.py',304),
  ('opMul -> DIV','opMul',1,'p_opMul','pascal_yacc.py',305),
  ('opMul -> MOD','opMul',1,'p_opMul','pascal_yacc.py',306),
  ('opMul -> OR','opMul',1,'p_opMul','pascal_yacc.py',307),
  ('factor -> argument','factor',1,'p_factor','pascal_yacc.py',312),
  ('factor -> LPAREN expressionBool RPAREN','factor',3,'p_factor','pascal_yacc.py',313),
  ('factor -> function_call','factor',1,'p_factor','pascal_yacc.py',314),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','pascal_yacc.py',324),
  ('assignment -> IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression','assignment',6,'p_assignment','pascal_yacc.py',325),
  ('empty -> <empty>','empty',0,'p_empty','pascal_yacc.py',343),
]
